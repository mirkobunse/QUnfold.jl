var documenterSearchIndex = {"docs":
[{"location":"experiments/#Experiments","page":"Experiments","title":"Experiments","text":"","category":"section"},{"location":"experiments/","page":"Experiments","title":"Experiments","text":"The experiments/ directory contains a Makefile with which you can run the experiments for our publication On Multi-Class Extensions of Adjusted Classify and Count.","category":"page"},{"location":"experiments/","page":"Experiments","title":"Experiments","text":"@InProceedings{bunse2022multiclass,\n  author    = {Mirko Bunse},\n  title     = {On Multi-Class Extensions of Adjusted Classify and Count},\n  booktitle = {Int. Worksh. on Learn. to Quantify: Meth. and Appl.},\n  year      = {2022},\n  pages     = {43--50},\n}","category":"page"},{"location":"experiments/","page":"Experiments","title":"Experiments","text":"CAUTION: We have run these experiments on 40 cores with 48 GB of RAM; with this setup, the experiments took 67 h. If you just want to check whether the scripts work, you can call make -f lequa.mk tests to traverse the entire code path with just a few iterations; this test completes in a few minutes.","category":"page"},{"location":"experiments/","page":"Experiments","title":"Experiments","text":"cd experiments/\nmake -f lequa.mk -n # inspect all steps of our experimentation without running them (dry-run)\n\nmake -f lequa.mk # run all experimentation (CAUTION: computation-heavy)","category":"page"},{"location":"experiments/","page":"Experiments","title":"Experiments","text":"We provide a Docker setup for those who prefer to run the experiments in an isolated environment, and possibly in a computing cluster.","category":"page"},{"location":"experiments/","page":"Experiments","title":"Experiments","text":"cd experiments/docker/\nmake # build the Docker image\n./run.sh # start an interactive Docker container from the image","category":"page"},{"location":"api-reference/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"Below, you find a listing of all public methods of this package. Any other method you might find in the source code is not intended for direct usage.","category":"page"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"CurrentModule = QUnfold","category":"page"},{"location":"api-reference/#Common-interface","page":"API reference","title":"Common interface","text":"","category":"section"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"TODO with an exemplary link to fit.","category":"page"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"fit\npredict\npredict_with_background","category":"page"},{"location":"api-reference/#QUnfold.fit","page":"API reference","title":"QUnfold.fit","text":"fit(m, X, y) -> FittedMethod\n\nReturn a copy of the QUnfold method m that is fitted to the data set (X, y).\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#QUnfold.predict","page":"API reference","title":"QUnfold.predict","text":"predict(m, X) -> Vector{Float64}\n\nPredict the class prevalences in the data set X with the fitted method m.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#QUnfold.predict_with_background","page":"API reference","title":"QUnfold.predict_with_background","text":"predict_with_background(m, X, X_b, α=1) -> Vector{Float64}\n\nPredict the class prevalences in the observed data set X with the fitted method m, taking into account a background measurement X_b that is scaled by α.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Quantification-/-unfolding-methods","page":"API reference","title":"Quantification / unfolding methods","text":"","category":"section"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"CC\nACC\nPCC\nPACC\nRUN\nSVD\nHDx\nHDy\nIBU\nSLD","category":"page"},{"location":"api-reference/#Feature-transformations","page":"API reference","title":"Feature transformations","text":"","category":"section"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"TODO.","category":"page"},{"location":"api-reference/","page":"API reference","title":"API reference","text":"ClassTransformer\nTreeTransformer","category":"page"},{"location":"#Home","page":"Home","title":"QUnfold.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package implements our unified framework of quantification and unfolding algorithms.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QUnfold.jl can be installed through the Julia package manager. From the Julia REPL, type ] to enter the Pkg mode of the REPL. Then run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add QUnfold","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each quantification / unfolding technique implements a fit and a predict function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The fit function receives a training set (X, y) as an input. It returns a trained copy of the quantification / unfolding technique; no in-place training happens.\nThe predict function receives a single sample of multiple data items. It returns the estimated vector of class prevalences within this sample.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The underlying classifier of each technique must implement the API of ScikitLearn.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using QUnfold, ScikitLearn\n\n@sk_import linear_model: LogisticRegression\n\n# X_trn, y_trn = my_training_data(...)\n\nacc = ACC(LogisticRegression())\ntrained_acc = fit(acc, X_trn, y_trn) # fit returns a trained COPY\n\n# X_tst = my_testing_data(...)\n\np_est = predict(trained_acc, X_tst) # return a prevalence vector","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This implementation is a part of my Ph.D. thesis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@PhdThesis{bunse2022machine,\n  author = {Bunse, Mirko},\n  school = {TU Dortmund University},\n  title  = {Machine Learning for Acquiring Knowledge in Astro-Particle Physics},\n  year   = {2022},\n  doi    = {10.17877/DE290R-23021},\n}","category":"page"}]
}
